# Importing the libraries
import numpy as np
import pandas as pd
from numpy import math

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

[ ]
from google.colab import drive
drive.mount('/content/drive')
Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount("/content/drive", force_remount=True).
[ ]
!pip install --upgrade xlrd
Requirement already satisfied: xlrd in /usr/local/lib/python3.7/dist-packages (2.0.1)
[ ]
# loading csv File
file_path = '/content/drive/MyDrive/AlmaBetter/Capstone Projects/default of credit card clients.xls'
df=pd.read_excel(file_path)
[ ]
df.head()

[ ]
df.shape
(30000, 25)
[ ]
df.dtypes
ID                            int64
LIMIT_BAL                     int64
SEX                           int64
EDUCATION                     int64
MARRIAGE                      int64
AGE                           int64
PAY_0                         int64
PAY_2                         int64
PAY_3                         int64
PAY_4                         int64
PAY_5                         int64
PAY_6                         int64
BILL_AMT1                     int64
BILL_AMT2                     int64
BILL_AMT3                     int64
BILL_AMT4                     int64
BILL_AMT5                     int64
BILL_AMT6                     int64
PAY_AMT1                      int64
PAY_AMT2                      int64
PAY_AMT3                      int64
PAY_AMT4                      int64
PAY_AMT5                      int64
PAY_AMT6                      int64
default payment next month    int64
dtype: object
[ ]
df.rename(columns={'PAY_0':'PAY_1','default payment next month':'DEF_PAY_NMO'},inplace = True)
[ ]
df.head(5)

[ ]
pay = df[['PAY_1',	'PAY_2'	,'PAY_3','PAY_4',	'PAY_5',	'PAY_6']]
pay_melt = pd.melt(pay)
print(pay_melt['value'].value_counts())

 0    95919
-1    34640
-2    24415
 2    18964
 1     3722
 3     1430
 4      453
 7      218
 5      137
 6       74
 8       28
Name: value, dtype: int64
[ ]
from locale import normalize
# Get the proportion of customers who had default payment in the next month (Oct.2005)? 
# About 22% customers had default payment next month

x=df['DEF_PAY_NMO'].value_counts(normalize=True)
plt.figure(figsize=(8,8))
plt.pie(x, colors=['springgreen', 'coral'], shadow=True, autopct='%1.2f%%', startangle=200)
plt.legend(labels=['0','1'])
plt.title(" proportion of customers who had default payment in the next month")

[ ]
# Check if there is any duplicate IDs
condition = bool(df.duplicated(subset = 'ID').any())

if condition:
    print('There are duplicate IDs')
else:
    print('No duplicate IDs')
No duplicate IDs
[ ]
df["LIMIT_BAL"].plot(kind="box")
plt.xlabel('Credit limit in NT$', fontweight='bold')
plt.ylabel('# of Customers', fontweight='bold')
plt.show()

[ ]
outliers = df.loc[df['LIMIT_BAL']>900000]
outliers

[ ]
# Get the statistic summary of the columns
# No data is extremly unresonable in these columns

df.describe()

[ ]
df.head()

[ ]
# Get SEX column's distribution. 1: male; 2: female
# No undocumented SEX code

df["SEX"].value_counts()
2    18112
1    11888
Name: SEX, dtype: int64
[ ]
# Change sex code to 'F' and 'M' and use category as datatype

df["SEX"]=df["SEX"].map({1:'M',2:'F'}).astype('category')
df["SEX"].dtypes
CategoricalDtype(categories=['F', 'M'], ordered=False)
[ ]
print(df['EDUCATION'].unique())
df['EDUCATION'].value_counts()

[2 1 3 5 4 6 0]
2    14030
1    10585
3     4917
5      280
4      123
6       51
0       14
Name: EDUCATION, dtype: int64
[ ]
df['EDUCATION']=df['EDUCATION'].replace({4:0,5:0,6:0})

[ ]
df['EDUCATION'].value_counts()
2    14030
1    10585
3     4917
0      468
Name: EDUCATION, dtype: int64
[ ]
# From dataset description: MARRIAGE: Marital status (1=married, 2=single, 3=others), but there is also 0


# df["MARRIAGE"].unique()
print(df['MARRIAGE'].value_counts())
2    15964
1    13659
3      323
0       54
Name: MARRIAGE, dtype: int64
[ ]
df["MARRIAGE"] = df["MARRIAGE"].replace({0:3})
print(df['MARRIAGE'].value_counts())
2    15964
1    13659
3      377
Name: MARRIAGE, dtype: int64
[ ]
